name: CI

on:
  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 현재 레포지토리의 코드를 체크아웃해서 Actions에 가져온다
        uses: actions/checkout@v4

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: yml 파일 만들기
        run: |
          mkdir -p src/main/resources/
          echo "$APPLICATION_YML" > src/main/resources/application.yml
          echo "$APPLICATION_JWT" > src/main/resources/application-jwt.yml
          echo "$APPLICATION_TEST" > src/main/resources/application-test.yml
        env:
          SPRING_PROFILES_ACTIVE: test
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
          APPLICATION_JWT: ${{ secrets.APPLICATION_JWT }}
          APPLICATION_TEST: ${{ secrets.APPLICATION_TEST }}

      - name: Docker Compose 실행
        run: docker compose up -d

      - name: Wait for MySQL & Redis to be healthy
        run: |
          echo "⏳ Waiting for containers to be healthy..."
          docker compose ps
          for service in mysql redis; do
            echo "🔍 Waiting for $service"
            until [ "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q $service))" = "healthy" ]; do
              echo "❗ $service is not healthy yet. Retrying..."
              sleep 3
            done
            echo "✅ $service is healthy!"
          done 


      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: 테스트 + 커버리지 리포트 생성
        run: ./gradlew test jacocoTestReport

      - name: 라인 커버리지 체크
        run: |
          echo "=== 라인 커버리지 검사 시작 ==="
          COVERED=$(xmllint --xpath "string(//counter[@type='LINE']/@covered)" build/reports/jacoco/test/jacocoTestReport.xml)
          MISSED=$(xmllint --xpath "string(//counter[@type='LINE']/@missed)" build/reports/jacoco/test/jacocoTestReport.xml)
          TOTAL=$((COVERED + MISSED))
          if [ "$TOTAL" -eq 0 ]; then
            echo "Total lines is 0. Something went wrong."
            exit 1
          fi
          PERCENTAGE=$((COVERED * 100 / TOTAL))
          echo "현재 라인 커버리지: $PERCENTAGE%"
          if [ "$PERCENTAGE" -lt 30 ]; then
            echo ":x: 커버리지가 30% 미만입니다. 실패 처리합니다."
            exit 1
          else
            echo ":흰색_확인_표시: 커버리지가 30% 이상입니다."
          fi
          echo "coverage=$PERCENTAGE" >> $GITHUB_ENV

        ## slack
  action-slack:
    needs: build
    if: always() # Pick up events even if the job fails or is canceled.
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: ${{ needs.build.result }}
      coverage: ${{ needs.build.outputs.coverage }}
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}